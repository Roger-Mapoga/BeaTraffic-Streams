/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package co.za.gmapssolutions.beatrafficrestproducer;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Address extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7629880729622696783L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Address\",\"namespace\":\"co.za.gmapssolutions.beatrafficrestproducer\",\"fields\":[{\"name\":\"user_id\",\"type\":\"long\",\"doc\":\"user id\"},{\"name\":\"street_name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Street name\",\"default\":null},{\"name\":\"postal_code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Postal code\"},{\"name\":\"city\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"city\"},{\"name\":\"country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"country\"},{\"name\":\"provence\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"provence\",\"default\":null},{\"name\":\"latitude\",\"type\":[\"null\",\"double\"],\"doc\":\"latitude\",\"default\":null},{\"name\":\"longitude\",\"type\":[\"null\",\"double\"],\"doc\":\"longitude\",\"default\":null}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Address> ENCODER =
      new BinaryMessageEncoder<Address>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Address> DECODER =
      new BinaryMessageDecoder<Address>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Address> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Address> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Address> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Address>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Address to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Address from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Address instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Address fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** user id */
   private long user_id;
  /** Street name */
   private java.lang.String street_name;
  /** Postal code */
   private java.lang.String postal_code;
  /** city */
   private java.lang.String city;
  /** country */
   private java.lang.String country;
  /** provence */
   private java.lang.String provence;
  /** latitude */
   private java.lang.Double latitude;
  /** longitude */
   private java.lang.Double longitude;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Address() {}

  /**
   * All-args constructor.
   * @param user_id user id
   * @param street_name Street name
   * @param postal_code Postal code
   * @param city city
   * @param country country
   * @param provence provence
   * @param latitude latitude
   * @param longitude longitude
   */
  public Address(java.lang.Long user_id, java.lang.String street_name, java.lang.String postal_code, java.lang.String city, java.lang.String country, java.lang.String provence, java.lang.Double latitude, java.lang.Double longitude) {
    this.user_id = user_id;
    this.street_name = street_name;
    this.postal_code = postal_code;
    this.city = city;
    this.country = country;
    this.provence = provence;
    this.latitude = latitude;
    this.longitude = longitude;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return user_id;
    case 1: return street_name;
    case 2: return postal_code;
    case 3: return city;
    case 4: return country;
    case 5: return provence;
    case 6: return latitude;
    case 7: return longitude;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: user_id = (java.lang.Long)value$; break;
    case 1: street_name = value$ != null ? value$.toString() : null; break;
    case 2: postal_code = value$ != null ? value$.toString() : null; break;
    case 3: city = value$ != null ? value$.toString() : null; break;
    case 4: country = value$ != null ? value$.toString() : null; break;
    case 5: provence = value$ != null ? value$.toString() : null; break;
    case 6: latitude = (java.lang.Double)value$; break;
    case 7: longitude = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'user_id' field.
   * @return user id
   */
  public long getUserId() {
    return user_id;
  }



  /**
   * Gets the value of the 'street_name' field.
   * @return Street name
   */
  public java.lang.String getStreetName() {
    return street_name;
  }



  /**
   * Gets the value of the 'postal_code' field.
   * @return Postal code
   */
  public java.lang.String getPostalCode() {
    return postal_code;
  }



  /**
   * Gets the value of the 'city' field.
   * @return city
   */
  public java.lang.String getCity() {
    return city;
  }



  /**
   * Gets the value of the 'country' field.
   * @return country
   */
  public java.lang.String getCountry() {
    return country;
  }



  /**
   * Gets the value of the 'provence' field.
   * @return provence
   */
  public java.lang.String getProvence() {
    return provence;
  }



  /**
   * Gets the value of the 'latitude' field.
   * @return latitude
   */
  public java.lang.Double getLatitude() {
    return latitude;
  }



  /**
   * Gets the value of the 'longitude' field.
   * @return longitude
   */
  public java.lang.Double getLongitude() {
    return longitude;
  }



  /**
   * Creates a new Address RecordBuilder.
   * @return A new Address RecordBuilder
   */
  public static co.za.gmapssolutions.beatrafficrestproducer.Address.Builder newBuilder() {
    return new co.za.gmapssolutions.beatrafficrestproducer.Address.Builder();
  }

  /**
   * Creates a new Address RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Address RecordBuilder
   */
  public static co.za.gmapssolutions.beatrafficrestproducer.Address.Builder newBuilder(co.za.gmapssolutions.beatrafficrestproducer.Address.Builder other) {
    if (other == null) {
      return new co.za.gmapssolutions.beatrafficrestproducer.Address.Builder();
    } else {
      return new co.za.gmapssolutions.beatrafficrestproducer.Address.Builder(other);
    }
  }

  /**
   * Creates a new Address RecordBuilder by copying an existing Address instance.
   * @param other The existing instance to copy.
   * @return A new Address RecordBuilder
   */
  public static co.za.gmapssolutions.beatrafficrestproducer.Address.Builder newBuilder(co.za.gmapssolutions.beatrafficrestproducer.Address other) {
    if (other == null) {
      return new co.za.gmapssolutions.beatrafficrestproducer.Address.Builder();
    } else {
      return new co.za.gmapssolutions.beatrafficrestproducer.Address.Builder(other);
    }
  }

  /**
   * RecordBuilder for Address instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Address>
    implements org.apache.avro.data.RecordBuilder<Address> {

    /** user id */
    private long user_id;
    /** Street name */
    private java.lang.String street_name;
    /** Postal code */
    private java.lang.String postal_code;
    /** city */
    private java.lang.String city;
    /** country */
    private java.lang.String country;
    /** provence */
    private java.lang.String provence;
    /** latitude */
    private java.lang.Double latitude;
    /** longitude */
    private java.lang.Double longitude;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(co.za.gmapssolutions.beatrafficrestproducer.Address.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.user_id)) {
        this.user_id = data().deepCopy(fields()[0].schema(), other.user_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.street_name)) {
        this.street_name = data().deepCopy(fields()[1].schema(), other.street_name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.postal_code)) {
        this.postal_code = data().deepCopy(fields()[2].schema(), other.postal_code);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.city)) {
        this.city = data().deepCopy(fields()[3].schema(), other.city);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.country)) {
        this.country = data().deepCopy(fields()[4].schema(), other.country);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.provence)) {
        this.provence = data().deepCopy(fields()[5].schema(), other.provence);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.latitude)) {
        this.latitude = data().deepCopy(fields()[6].schema(), other.latitude);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.longitude)) {
        this.longitude = data().deepCopy(fields()[7].schema(), other.longitude);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing Address instance
     * @param other The existing instance to copy.
     */
    private Builder(co.za.gmapssolutions.beatrafficrestproducer.Address other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.user_id)) {
        this.user_id = data().deepCopy(fields()[0].schema(), other.user_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.street_name)) {
        this.street_name = data().deepCopy(fields()[1].schema(), other.street_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.postal_code)) {
        this.postal_code = data().deepCopy(fields()[2].schema(), other.postal_code);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.city)) {
        this.city = data().deepCopy(fields()[3].schema(), other.city);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.country)) {
        this.country = data().deepCopy(fields()[4].schema(), other.country);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.provence)) {
        this.provence = data().deepCopy(fields()[5].schema(), other.provence);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.latitude)) {
        this.latitude = data().deepCopy(fields()[6].schema(), other.latitude);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.longitude)) {
        this.longitude = data().deepCopy(fields()[7].schema(), other.longitude);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'user_id' field.
      * user id
      * @return The value.
      */
    public long getUserId() {
      return user_id;
    }


    /**
      * Sets the value of the 'user_id' field.
      * user id
      * @param value The value of 'user_id'.
      * @return This builder.
      */
    public co.za.gmapssolutions.beatrafficrestproducer.Address.Builder setUserId(long value) {
      validate(fields()[0], value);
      this.user_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'user_id' field has been set.
      * user id
      * @return True if the 'user_id' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'user_id' field.
      * user id
      * @return This builder.
      */
    public co.za.gmapssolutions.beatrafficrestproducer.Address.Builder clearUserId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'street_name' field.
      * Street name
      * @return The value.
      */
    public java.lang.String getStreetName() {
      return street_name;
    }


    /**
      * Sets the value of the 'street_name' field.
      * Street name
      * @param value The value of 'street_name'.
      * @return This builder.
      */
    public co.za.gmapssolutions.beatrafficrestproducer.Address.Builder setStreetName(java.lang.String value) {
      validate(fields()[1], value);
      this.street_name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'street_name' field has been set.
      * Street name
      * @return True if the 'street_name' field has been set, false otherwise.
      */
    public boolean hasStreetName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'street_name' field.
      * Street name
      * @return This builder.
      */
    public co.za.gmapssolutions.beatrafficrestproducer.Address.Builder clearStreetName() {
      street_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'postal_code' field.
      * Postal code
      * @return The value.
      */
    public java.lang.String getPostalCode() {
      return postal_code;
    }


    /**
      * Sets the value of the 'postal_code' field.
      * Postal code
      * @param value The value of 'postal_code'.
      * @return This builder.
      */
    public co.za.gmapssolutions.beatrafficrestproducer.Address.Builder setPostalCode(java.lang.String value) {
      validate(fields()[2], value);
      this.postal_code = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'postal_code' field has been set.
      * Postal code
      * @return True if the 'postal_code' field has been set, false otherwise.
      */
    public boolean hasPostalCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'postal_code' field.
      * Postal code
      * @return This builder.
      */
    public co.za.gmapssolutions.beatrafficrestproducer.Address.Builder clearPostalCode() {
      postal_code = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * city
      * @return The value.
      */
    public java.lang.String getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * city
      * @param value The value of 'city'.
      * @return This builder.
      */
    public co.za.gmapssolutions.beatrafficrestproducer.Address.Builder setCity(java.lang.String value) {
      validate(fields()[3], value);
      this.city = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * city
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'city' field.
      * city
      * @return This builder.
      */
    public co.za.gmapssolutions.beatrafficrestproducer.Address.Builder clearCity() {
      city = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * country
      * @return The value.
      */
    public java.lang.String getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * country
      * @param value The value of 'country'.
      * @return This builder.
      */
    public co.za.gmapssolutions.beatrafficrestproducer.Address.Builder setCountry(java.lang.String value) {
      validate(fields()[4], value);
      this.country = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * country
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'country' field.
      * country
      * @return This builder.
      */
    public co.za.gmapssolutions.beatrafficrestproducer.Address.Builder clearCountry() {
      country = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'provence' field.
      * provence
      * @return The value.
      */
    public java.lang.String getProvence() {
      return provence;
    }


    /**
      * Sets the value of the 'provence' field.
      * provence
      * @param value The value of 'provence'.
      * @return This builder.
      */
    public co.za.gmapssolutions.beatrafficrestproducer.Address.Builder setProvence(java.lang.String value) {
      validate(fields()[5], value);
      this.provence = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'provence' field has been set.
      * provence
      * @return True if the 'provence' field has been set, false otherwise.
      */
    public boolean hasProvence() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'provence' field.
      * provence
      * @return This builder.
      */
    public co.za.gmapssolutions.beatrafficrestproducer.Address.Builder clearProvence() {
      provence = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * latitude
      * @return The value.
      */
    public java.lang.Double getLatitude() {
      return latitude;
    }


    /**
      * Sets the value of the 'latitude' field.
      * latitude
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public co.za.gmapssolutions.beatrafficrestproducer.Address.Builder setLatitude(java.lang.Double value) {
      validate(fields()[6], value);
      this.latitude = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * latitude
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'latitude' field.
      * latitude
      * @return This builder.
      */
    public co.za.gmapssolutions.beatrafficrestproducer.Address.Builder clearLatitude() {
      latitude = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * longitude
      * @return The value.
      */
    public java.lang.Double getLongitude() {
      return longitude;
    }


    /**
      * Sets the value of the 'longitude' field.
      * longitude
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public co.za.gmapssolutions.beatrafficrestproducer.Address.Builder setLongitude(java.lang.Double value) {
      validate(fields()[7], value);
      this.longitude = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * longitude
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'longitude' field.
      * longitude
      * @return This builder.
      */
    public co.za.gmapssolutions.beatrafficrestproducer.Address.Builder clearLongitude() {
      longitude = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Address build() {
      try {
        Address record = new Address();
        record.user_id = fieldSetFlags()[0] ? this.user_id : (java.lang.Long) defaultValue(fields()[0]);
        record.street_name = fieldSetFlags()[1] ? this.street_name : (java.lang.String) defaultValue(fields()[1]);
        record.postal_code = fieldSetFlags()[2] ? this.postal_code : (java.lang.String) defaultValue(fields()[2]);
        record.city = fieldSetFlags()[3] ? this.city : (java.lang.String) defaultValue(fields()[3]);
        record.country = fieldSetFlags()[4] ? this.country : (java.lang.String) defaultValue(fields()[4]);
        record.provence = fieldSetFlags()[5] ? this.provence : (java.lang.String) defaultValue(fields()[5]);
        record.latitude = fieldSetFlags()[6] ? this.latitude : (java.lang.Double) defaultValue(fields()[6]);
        record.longitude = fieldSetFlags()[7] ? this.longitude : (java.lang.Double) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Address>
    WRITER$ = (org.apache.avro.io.DatumWriter<Address>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Address>
    READER$ = (org.apache.avro.io.DatumReader<Address>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.user_id);

    if (this.street_name == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.street_name);
    }

    out.writeString(this.postal_code);

    out.writeString(this.city);

    out.writeString(this.country);

    if (this.provence == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.provence);
    }

    if (this.latitude == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.latitude);
    }

    if (this.longitude == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.longitude);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.user_id = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.street_name = null;
      } else {
        this.street_name = in.readString();
      }

      this.postal_code = in.readString();

      this.city = in.readString();

      this.country = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.provence = null;
      } else {
        this.provence = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.latitude = null;
      } else {
        this.latitude = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.longitude = null;
      } else {
        this.longitude = in.readDouble();
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.user_id = in.readLong();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.street_name = null;
          } else {
            this.street_name = in.readString();
          }
          break;

        case 2:
          this.postal_code = in.readString();
          break;

        case 3:
          this.city = in.readString();
          break;

        case 4:
          this.country = in.readString();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.provence = null;
          } else {
            this.provence = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.latitude = null;
          } else {
            this.latitude = in.readDouble();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.longitude = null;
          } else {
            this.longitude = in.readDouble();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










