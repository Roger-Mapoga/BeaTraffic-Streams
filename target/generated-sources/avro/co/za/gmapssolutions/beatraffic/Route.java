/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package co.za.gmapssolutions.beatraffic;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Route extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6804617271398344461L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Route\",\"namespace\":\"co.za.gmapssolutions.beatraffic\",\"fields\":[{\"name\":\"user_id\",\"type\":\"long\",\"doc\":\"user id\"},{\"name\":\"route_id\",\"type\":[\"null\",\"int\"],\"doc\":\"route id\",\"default\":null},{\"name\":\"route\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"GeoPoint\",\"fields\":[{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"latitude\",\"type\":\"double\"}]}}}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Route> ENCODER =
      new BinaryMessageEncoder<Route>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Route> DECODER =
      new BinaryMessageDecoder<Route>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Route> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Route> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Route> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Route>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Route to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Route from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Route instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Route fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** user id */
   private long user_id;
  /** route id */
   private java.lang.Integer route_id;
   private java.util.List<co.za.gmapssolutions.beatraffic.GeoPoint> route;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Route() {}

  /**
   * All-args constructor.
   * @param user_id user id
   * @param route_id route id
   * @param route The new value for route
   */
  public Route(java.lang.Long user_id, java.lang.Integer route_id, java.util.List<co.za.gmapssolutions.beatraffic.GeoPoint> route) {
    this.user_id = user_id;
    this.route_id = route_id;
    this.route = route;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return user_id;
    case 1: return route_id;
    case 2: return route;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: user_id = (java.lang.Long)value$; break;
    case 1: route_id = (java.lang.Integer)value$; break;
    case 2: route = (java.util.List<co.za.gmapssolutions.beatraffic.GeoPoint>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'user_id' field.
   * @return user id
   */
  public long getUserId() {
    return user_id;
  }



  /**
   * Gets the value of the 'route_id' field.
   * @return route id
   */
  public java.lang.Integer getRouteId() {
    return route_id;
  }



  /**
   * Gets the value of the 'route' field.
   * @return The value of the 'route' field.
   */
  public java.util.List<co.za.gmapssolutions.beatraffic.GeoPoint> getRoute() {
    return route;
  }



  /**
   * Creates a new Route RecordBuilder.
   * @return A new Route RecordBuilder
   */
  public static co.za.gmapssolutions.beatraffic.Route.Builder newBuilder() {
    return new co.za.gmapssolutions.beatraffic.Route.Builder();
  }

  /**
   * Creates a new Route RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Route RecordBuilder
   */
  public static co.za.gmapssolutions.beatraffic.Route.Builder newBuilder(co.za.gmapssolutions.beatraffic.Route.Builder other) {
    if (other == null) {
      return new co.za.gmapssolutions.beatraffic.Route.Builder();
    } else {
      return new co.za.gmapssolutions.beatraffic.Route.Builder(other);
    }
  }

  /**
   * Creates a new Route RecordBuilder by copying an existing Route instance.
   * @param other The existing instance to copy.
   * @return A new Route RecordBuilder
   */
  public static co.za.gmapssolutions.beatraffic.Route.Builder newBuilder(co.za.gmapssolutions.beatraffic.Route other) {
    if (other == null) {
      return new co.za.gmapssolutions.beatraffic.Route.Builder();
    } else {
      return new co.za.gmapssolutions.beatraffic.Route.Builder(other);
    }
  }

  /**
   * RecordBuilder for Route instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Route>
    implements org.apache.avro.data.RecordBuilder<Route> {

    /** user id */
    private long user_id;
    /** route id */
    private java.lang.Integer route_id;
    private java.util.List<co.za.gmapssolutions.beatraffic.GeoPoint> route;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(co.za.gmapssolutions.beatraffic.Route.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.user_id)) {
        this.user_id = data().deepCopy(fields()[0].schema(), other.user_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.route_id)) {
        this.route_id = data().deepCopy(fields()[1].schema(), other.route_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.route)) {
        this.route = data().deepCopy(fields()[2].schema(), other.route);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Route instance
     * @param other The existing instance to copy.
     */
    private Builder(co.za.gmapssolutions.beatraffic.Route other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.user_id)) {
        this.user_id = data().deepCopy(fields()[0].schema(), other.user_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.route_id)) {
        this.route_id = data().deepCopy(fields()[1].schema(), other.route_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.route)) {
        this.route = data().deepCopy(fields()[2].schema(), other.route);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'user_id' field.
      * user id
      * @return The value.
      */
    public long getUserId() {
      return user_id;
    }


    /**
      * Sets the value of the 'user_id' field.
      * user id
      * @param value The value of 'user_id'.
      * @return This builder.
      */
    public co.za.gmapssolutions.beatraffic.Route.Builder setUserId(long value) {
      validate(fields()[0], value);
      this.user_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'user_id' field has been set.
      * user id
      * @return True if the 'user_id' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'user_id' field.
      * user id
      * @return This builder.
      */
    public co.za.gmapssolutions.beatraffic.Route.Builder clearUserId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'route_id' field.
      * route id
      * @return The value.
      */
    public java.lang.Integer getRouteId() {
      return route_id;
    }


    /**
      * Sets the value of the 'route_id' field.
      * route id
      * @param value The value of 'route_id'.
      * @return This builder.
      */
    public co.za.gmapssolutions.beatraffic.Route.Builder setRouteId(java.lang.Integer value) {
      validate(fields()[1], value);
      this.route_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'route_id' field has been set.
      * route id
      * @return True if the 'route_id' field has been set, false otherwise.
      */
    public boolean hasRouteId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'route_id' field.
      * route id
      * @return This builder.
      */
    public co.za.gmapssolutions.beatraffic.Route.Builder clearRouteId() {
      route_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'route' field.
      * @return The value.
      */
    public java.util.List<co.za.gmapssolutions.beatraffic.GeoPoint> getRoute() {
      return route;
    }


    /**
      * Sets the value of the 'route' field.
      * @param value The value of 'route'.
      * @return This builder.
      */
    public co.za.gmapssolutions.beatraffic.Route.Builder setRoute(java.util.List<co.za.gmapssolutions.beatraffic.GeoPoint> value) {
      validate(fields()[2], value);
      this.route = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'route' field has been set.
      * @return True if the 'route' field has been set, false otherwise.
      */
    public boolean hasRoute() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'route' field.
      * @return This builder.
      */
    public co.za.gmapssolutions.beatraffic.Route.Builder clearRoute() {
      route = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Route build() {
      try {
        Route record = new Route();
        record.user_id = fieldSetFlags()[0] ? this.user_id : (java.lang.Long) defaultValue(fields()[0]);
        record.route_id = fieldSetFlags()[1] ? this.route_id : (java.lang.Integer) defaultValue(fields()[1]);
        record.route = fieldSetFlags()[2] ? this.route : (java.util.List<co.za.gmapssolutions.beatraffic.GeoPoint>) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Route>
    WRITER$ = (org.apache.avro.io.DatumWriter<Route>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Route>
    READER$ = (org.apache.avro.io.DatumReader<Route>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.user_id);

    if (this.route_id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.route_id);
    }

    long size0 = this.route.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (co.za.gmapssolutions.beatraffic.GeoPoint e0: this.route) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.user_id = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.route_id = null;
      } else {
        this.route_id = in.readInt();
      }

      long size0 = in.readArrayStart();
      java.util.List<co.za.gmapssolutions.beatraffic.GeoPoint> a0 = this.route;
      if (a0 == null) {
        a0 = new SpecificData.Array<co.za.gmapssolutions.beatraffic.GeoPoint>((int)size0, SCHEMA$.getField("route").schema());
        this.route = a0;
      } else a0.clear();
      SpecificData.Array<co.za.gmapssolutions.beatraffic.GeoPoint> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<co.za.gmapssolutions.beatraffic.GeoPoint>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          co.za.gmapssolutions.beatraffic.GeoPoint e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new co.za.gmapssolutions.beatraffic.GeoPoint();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.user_id = in.readLong();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.route_id = null;
          } else {
            this.route_id = in.readInt();
          }
          break;

        case 2:
          long size0 = in.readArrayStart();
          java.util.List<co.za.gmapssolutions.beatraffic.GeoPoint> a0 = this.route;
          if (a0 == null) {
            a0 = new SpecificData.Array<co.za.gmapssolutions.beatraffic.GeoPoint>((int)size0, SCHEMA$.getField("route").schema());
            this.route = a0;
          } else a0.clear();
          SpecificData.Array<co.za.gmapssolutions.beatraffic.GeoPoint> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<co.za.gmapssolutions.beatraffic.GeoPoint>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              co.za.gmapssolutions.beatraffic.GeoPoint e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new co.za.gmapssolutions.beatraffic.GeoPoint();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










